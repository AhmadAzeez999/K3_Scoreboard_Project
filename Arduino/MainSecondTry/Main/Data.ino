#define PIXELS 120  //number of pixels in one strip of lights

#define PIXEL_PORTC  PORTC// Port of the pin the pixels are connected to  //sets what the pins are
#define PIXEL_DDRC  DDRC   // Port of the pin the pixels are connected to  //sets what the pins do

#define T1H  814    // Width of a 1 bit in ns - 13 cycles
#define T1L  438    // Width of a 1 bit in ns -  7 cycles

#define T0H  312    // Width of a 0 bit in ns -  5 cycles
#define T0L  936    // Width of a 0 bit in ns - 15 cycles 

#define RES 10000000   // Width of the low gap between bits to cause a frame to latch
#define NS_PER_SEC (1000000000L)
#define CYCLES_PER_SEC (F_CPU)
#define NS_PER_CYCLE ( NS_PER_SEC / CYCLES_PER_SEC )
#define NS_TO_CYCLES(n) ( (n) / NS_PER_CYCLE )

bool rOO = false; //is the remote on or off
bool rEM = false; //are you entering a manual countdown time "rEM"
bool vP = false; //should we be sending voltage out
uint8_t rEC = 0; //remote enter count...used to determine
uint8_t vPin = 17;
uint8_t vPin2 = 16;

RTC_DS3231 rtc;
DateTime rtcStart;
DateTime rtcEnd;

bool flStarted = false;

bool cSC = false;  //capture Scroll Char
bool sT = false; //scrolling text if text is scrolling....keep scrolling do not scroll and pause
bool cdOnly = true; //countdown only mode.  displays stopped time.

uint8_t clrPat = 0; 
//Brightness Array
//100%	FF
//95%	F2
//90%	E6
//85%	D9
//80%	CC
//75%	BF
//70%	B3
//65%	A6
//60%	99
//55%	8C
//50%	80
//45%	73
//40%	66
//35%	59
//30%	4D
//25%	40
//20%	33
//15%	26
//10%	1A
//5%	0D
//0%	00
uint8_t br[10] = {0x00, 0x1A, 0x33, 0x4D, 0x66, 0x73, 0x80, 0x99, 0xB3, 0xCC};
//TOP COLOUR
uint8_t brLvl = 1;
uint8_t rVT = br[0];
uint8_t gVT = br[brLvl];
uint8_t bVT = br[0];
//BOTTOM COLOUR
uint8_t rVB = br[0];
uint8_t gVB = br[brLvl];
uint8_t bVB = br[brLvl];
//RESULT section COLOUR
uint8_t rVR = br[brLvl];
uint8_t gVR = br[0];
uint8_t bVR = br[0];

//TIMINING SPECIFIC variables
uint8_t tS = 0;  //timer Seconds
uint8_t tSC = 0;//timer Seconds Current
uint8_t tM = 0;  //timer minuutes
char cdTS[6]; //count down time String
bool tSed = false; //timer started  - used to control what to show based on if the clock is running or not
unsigned long clT = millis(); //cleared time
unsigned long cT = millis(); // current time
uint8_t cdTimeIn[4];
unsigned long cdTime;
unsigned long cdDiff;
unsigned long timeDiff;
bool cdR = false; //countdown running
bool dCD = false; //display countdown
bool externalCount = false;  //countdown from fieldlynx

//TEXT section
uint8_t cC = 0;  //char count controls the number of chars that are in the input set
int B;  //byte recieved.  stores the incoming byte
uint8_t subR = 1;  //sub routine used to determine what routine to display, timer, scroll and pause etc.
int sDel = 1000; // show delay //number of miliseconds to scroll across 20 chars
const uint8_t maxChar = 200;  //max number of characters that scroll accross the display
const uint8_t numSmChar = 21;
char msg20[numSmChar];
char msg20Copy[numSmChar];
char dataString[maxChar];//the main string of data
char dataStringCopy[numSmChar]; //can be used to display on the screen before scrolling off
char ipString[numSmChar]; //can be used to display on the screen before scrolling off
char cVar = ' '; //control varaiable.  leading variable passed to the display to control feature options

bool isVertical = false;
char *strings[7];
char *ptr;
char *nPtr;
char *name[2];



const uint8_t numBgChar = 6;
char msg6[numBgChar];
//char msg6Copy[numBgChar];

const uint8_t numHjLg = 7;
char msgHjLg[numHjLg];

static const uint8_t fullBits =  0b11111111;
//static const uint8_t onBits =  0b11111100; //bits on the first set to show

// Phase #1 - Always 1  - 5 cycles
// Phase #2 - Data part - 8 cycles
// Phase #3 - Always 0  - 7 cycles

static inline void sendBitx8(  const uint8_t row, const uint8_t colorbyte, const uint8_t onBits) {

  asm volatile (

    "L_%=: \n\r"
    "out %[port], %[onBits] \n\t"
    // (1 cycles) - send either T0H or the first part of T1H.
    // Onbits is a mask of which bits have strings attached.
    // Next determine if we are going to be sending 1s or 0s based on the current bit in the color....

    "mov r0, %[bitwalker] \n\t"               // (1 cycles)
    "and r0, %[colorbyte] \n\t"               // (1 cycles)  - is the current bit in the color byte set?
    "breq OFF_%= \n\t"                        // (1 cycles) - bit in color is 0, then send full zero row
    //(takes 2 cycles if branch taken, count the extra 1 on the target line)

    // If we get here, then we want to send a 1 for every row that has an ON dot...
    "nop \n\t  "
    "out %[port], %[row]   \n\t"                  // (1 cycles) - set the output bits to [row]
    //This is phase for T0H-T1H.
    // ==========
    // (5 cycles) - T0H (Phase #1)


    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t "                                   // (1 cycles)

    "out %[port], __zero_reg__ \n\t"              // (1 cycles) - set the output bits to 0x00
    //based on the bit in colorbyte. This is phase for T0H-T1H
    // ==========
    // (8 cycles) - Phase #2

    "ror %[bitwalker] \n\t"                      // (1 cycles) - get ready for next pass.
    //On last pass, the bit will end up in C flag

    "brcs DONE_%= \n\t"                          // (1 cycles) Exit if carry bit is set as a
    //result of us walking all 8 bits. We assume that the process around us will tak long enough
    //to cover the phase 3 delay

    "nop \n\t \n\t "                             // (1 cycles) - When added to the 5 cycles in S:,
    //we gte the 7 cycles of T1L

    "jmp L_%= \n\t"                              // (3 cycles)
    // (1 cycles) - The OUT on the next pass of the loop
    // ==========
    // (7 cycles) - T1L


    "OFF_%=: \n\r"                                // (1 cycles)    Note that we land here becuase of breq,
    //which takes takes 2 cycles

    "out %[port], __zero_reg__ \n\t"              // (1 cycles) - set the output bits to 0x00 based on the
    //bit in colorbyte. This is phase for T0H-T1H
    // ==========
    // (5 cycles) - T0H

    "ror %[bitwalker] \n\t"                      // (1 cycles) - get ready for next pass.
    //On last pass, the bit will end up in C flag

    "brcs DONE_%= \n\t"             // (1 cycles) Exit if carry bit is set as a
    //result of us walking all 8 bits. We assume that the
    //process around us will take long enough to cover the phase 3 delay

    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t "                                   // (1 cycles)

    "jmp L_%= \n\t"                               // (3 cycles)
    // (1 cycles) - The OUT on the next pass of the loop
    // ==========
    //(15 cycles) - T0L


    "DONE_%=: \n\t"

    // Don't need an explicit delay here since the overhead that follows will always be long enough

    ::
    [port]    "I" (_SFR_IO_ADDR(PIXEL_PORTC)),
    [row]   "d" (row),
    [onBits]   "d" (onBits),
    [colorbyte]   "d" (colorbyte ),     // Phase 2 of the signal where the actual data bits show up.
    [bitwalker] "r" (0x80)    // register to hold a bit that we will walk down though the color byte

  );

  // Note that the inter-bit gap can be as long as you want as long as it doesn't exceed the reset timeout
  //(which is A long time)

}

// Send 3 bytes of color data (R,G,B) for a signle pixel down all the connected stringsat the same time
// A 1 bit in "row" means send the color, a 0 bit means send black.
static inline void sendRowRGB( uint8_t row,  uint8_t r,  uint8_t g,  uint8_t b ) {
  sendBitx8( row, g, fullBits);      // WS2812 takes colors in GRB order
  sendBitx8( row, r, fullBits);      // WS2812 takes colors in GRB order
  sendBitx8( row, b, fullBits);      // WS2812 takes colors in GRB order
}

// how long to scroll across 20 chars
void show() {
  delay(sDel);
}

// how long to scroll across 20 chars
void setsDel(int ms) {
  sDel = ms;
}

// This nice 5x7 font from here...
// http://sunge.awardspace.com/glcd-sd/node4.html

// Font details:
// 1) Each char is fixed 5x7 pixels.
// 2) Each byte is one column.
// 3) Columns are left to right order, leftmost byte is leftmost column of pixels.
// 4) Each column is 8 bits high.
// 5) Bit #7 is top line of char, Bit #1 is bottom.
// 6) Bit #0 is always 0, becuase this pin is used as serial input and setting to
// 1 would enable the pull-up.

// defines ascii characters 0x20-0x7F (32-127)
// PROGMEM after variable name as per https://www.arduino.cc/en/Reference/PROGMEM

#define FONT_WIDTH 5
#define BIG_FONT_WIDTH 10
#define INTERCHAR_SPACE 1

//0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // `
//0x70, 0x38, 0x1c, 0x3e, 0xf0, 0x3e, 0x1c, 0x38, 0x70, 0x00, // rose
const uint8_t Font10x14t_[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
  0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, // !
  0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, // "
  0x06, 0x06, 0x3F, 0x3F, 0x06, 0x06, 0x3F, 0x3F, 0x06, 0x06, // #
  0x0E, 0x1F, 0x31, 0x31, 0x7F, 0x7F, 0x31, 0x31, 0x10, 0x00, // $
  0x00, 0x00, 0x18, 0x18, 0x01, 0x03, 0x06, 0x0C, 0x18, 0x00, // %
  0x00, 0x0C, 0x1F, 0x33, 0x20, 0x21, 0x33, 0x1E, 0x0C, 0x00, // &
  0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // '
  0x00, 0x00, 0x1F, 0x3F, 0x60, 0x60, 0x60, 0x40, 0x00, 0x00, // (
  0x00, 0x00, 0x40, 0x60, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00, // )
  0x00, 0x54, 0x38, 0x7C, 0x38, 0x54, 0x00, 0x00, 0x00, 0x00, // *
  0x00, 0x00, 0x01, 0x01, 0x07, 0x07, 0x01, 0x01, 0x00, 0x00, // +
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // comma
  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, // -
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0E, 0x1C, 0x38, // /
  0x1F, 0x3F, 0x60, 0x60, 0x60, 0x63, 0x66, 0x6C, 0x3F, 0x1F, // 0
  0x00, 0x00, 0x18, 0x38, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, // 1
  0x18, 0x38, 0x60, 0x60, 0x60, 0x60, 0x60, 0x61, 0x3F, 0x1E, // 2
  0x18, 0x38, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x3F, 0x1E, // 3
  0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x7F, 0x7F, 0x00, 0x00, // 4
  0x7F, 0x7F, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x61, 0x60, // 5
  0x07, 0x0F, 0x19, 0x31, 0x61, 0x61, 0x61, 0x61, 0x00, 0x00, // 6
  0x60, 0x60, 0x60, 0x60, 0x60, 0x61, 0x63, 0x66, 0x7C, 0x78, // 7
  0x1E, 0x3F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x3F, 0x1E, // 8
  0x1E, 0x3F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x3F, 0x1F, // 9
  0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, // :
  0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x00, 0x00, // ;
  0x00, 0x00, 0x03, 0x07, 0x0E, 0x1C, 0x18, 0x00, 0x00, 0x00, // <
  0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, // =
  0x00, 0x00, 0x00, 0x18, 0x1C, 0x0E, 0x07, 0x03, 0x00, 0x00, // >
  0x00, 0x1C, 0x3C, 0x60, 0x60, 0x60, 0x61, 0x3F, 0x1F, 0x00, // ?
  0x07, 0x0F, 0x18, 0x19, 0x19, 0x19, 0x18, 0x0F, 0x07, 0x00, // @
  0x1F, 0x3F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x3F, 0x1F, // A
  0x7F, 0x7F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x3F, 0x1E, // B
  0x1F, 0x3F, 0x70, 0x60, 0x60, 0x60, 0x60, 0x70, 0x30, 0x00, // C
  0x7F, 0x7F, 0x60, 0x60, 0x60, 0x60, 0x60, 0x70, 0x3F, 0x1F, // D
  0x7F, 0x7F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x60, 0x00, // E
  0x7F, 0x7F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x60, 0x00, // F
  0x1F, 0x3F, 0x60, 0x60, 0x60, 0x60, 0x60, 0x70, 0x30, 0x10, // G
  0x7F, 0x7F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7F, 0x7F, // H
  0x00, 0x60, 0x60, 0x60, 0x7F, 0x7F, 0x60, 0x60, 0x60, 0x00, // I
  0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7F, 0x7F, 0x60, 0x60, // J
  0x7F, 0x7F, 0x03, 0x07, 0x0E, 0x1C, 0x38, 0x70, 0x60, 0x00, // K
  0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // L
  0x3F, 0x7F, 0x60, 0x60, 0x3F, 0x3F, 0x60, 0x60, 0x7F, 0x3F, // M
  0x7F, 0x7F, 0x38, 0x1E, 0x07, 0x01, 0x00, 0x00, 0x7F, 0x7F, // N
  0x1F, 0x3F, 0x70, 0x60, 0x60, 0x60, 0x60, 0x70, 0x3F, 0x1F, // O
  0x7F, 0x7F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x7F, 0x1E, // P
  0x1F, 0x3F, 0x70, 0x60, 0x60, 0x60, 0x60, 0x70, 0x3F, 0x1F, // Q
  0x7F, 0x7F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x7F, 0x3F, // R
  0x1E, 0x3F, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x60, 0x00, // S
  0x60, 0x60, 0x60, 0x60, 0x7F, 0x7F, 0x60, 0x60, 0x60, 0x60, // T
  0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, // U
  0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, // V
  0x7F, 0x7F, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x7F, 0x7F, // W
  0x60, 0x78, 0x1C, 0x0E, 0x07, 0x07, 0x0E, 0x1C, 0x78, 0x60, // X
  0x7C, 0x7E, 0x03, 0x01, 0x00, 0x00, 0x01, 0x03, 0x7E, 0x7C, // Y
  0x60, 0x60, 0x60, 0x60, 0x61, 0x63, 0x67, 0x6E, 0x7C, 0x78, // Z
  0x00, 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, // [
  0x38, 0x1C, 0x0E, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, // (bacslash)
  0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ]
  0x00, 0x00, 0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, // ^
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // _
  0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // `
  0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, // a
  0x7F, 0x7F, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, // b
  0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, // c
  0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x7F, 0x7F, // d
  0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, //
  0x01, 0x01, 0x1F, 0x3F, 0x61, 0x61, 0x60, 0x38, 0x18, 0x00, // f
  0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, // g
  0x7F, 0x7F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, // h
  0x00, 0x00, 0x00, 0x03, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00, //
  0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x1B, 0x1B, 0x00, 0x00, // j
  0x00, 0x7F, 0x7F, 0x00, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, //
  0x00, 0x00, 0x60, 0x60, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, // l
  0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, // m
  0x03, 0x03, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, //
  0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, // o
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, // p
  0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x03, 0x03, 0x00, // q
  0x03, 0x03, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, // r
  0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, // s
  0x00, 0x03, 0x03, 0x1F, 0x1F, 0x03, 0x03, 0x00, 0x00, 0x00, // t
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, // u
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, //
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, // w
  0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, // x
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, // y
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, // z
  0x00, 0x00, 0x1F, 0x3F, 0x60, 0x60, 0x60, 0x40, 0x00, 0x00, // {
  0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, // |
  0x00, 0x00, 0x40, 0x60, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00, // }
  0x00, 0x01, 0x01, 0x01, 0x01, 0x0D, 0x07, 0x03, 0x01, 0x00, // ~
  0x08, 0x1C, 0x2A, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, //
};

//bottom of the 10 wide 14 high font
// 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // `
// 0x00, 0x80, 0xc0, 0x20, 0xfe, 0x08, 0x10, 0x60, 0x40, 0x00, // Rose
const uint8_t Font10x14b[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
  0x00, 0x00, 0x00, 0x00, 0xe6, 0xe6, 0x00, 0x00, 0x00, 0x00, // !
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // "
  0x60, 0x60, 0xfc, 0xfc, 0x60, 0x60, 0xfc, 0xfc, 0x60, 0x60, // #
  0x00, 0x08, 0x8c, 0x8c, 0xfe, 0xfe, 0x8c, 0x8c, 0xf8, 0x70, // $
  0x00, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x30, 0x30, 0x00, 0x00, // %
  0x00, 0x1c, 0x36, 0xe2, 0xc2, 0xe2, 0x36, 0x1e, 0x34, 0x02, // &
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // '
  0x00, 0x00, 0xf8, 0xfc, 0x06, 0x06, 0x06, 0x02, 0x00, 0x00, // (
  0x00, 0x00, 0x02, 0x06, 0x06, 0x06, 0xfc, 0xf8, 0x00, 0x00, // )
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // *
  0x00, 0x00, 0x80, 0x80, 0xe0, 0xe0, 0x80, 0x80, 0x00, 0x00, // +
  0x00, 0x00, 0x1a, 0x1a, 0x1a, 0x1c, 0x00, 0x00, 0x00, 0x00, // comma
  0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // -
  0x00, 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, // .
  0x1c, 0x38, 0x70, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, // /
  0xf8, 0xfc, 0x36, 0x66, 0xc6, 0x06, 0x06, 0x06, 0xfc, 0xf8, // 0
  0x00, 0x00, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x06, 0x00, 0x00, // 1
  0x06, 0x0e, 0x1e, 0x36, 0x66, 0xc6, 0x86, 0x06, 0x06, 0x06, // 2
  0x18, 0x1c, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0xfc, 0x78, // 3
  0xe0, 0xe0, 0x60, 0x60, 0x60, 0x60, 0xfe, 0xfe, 0x60, 0x60, // 4
  0x18, 0x1c, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xfc, 0xf8, // 5
  0xf8, 0xfc, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0xfc, 0x78, // 6
  0x00, 0x00, 0x7e, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // 7
  0x78, 0xfc, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0xfc, 0x78, // 8
  0x00, 0x00, 0x86, 0x86, 0x86, 0x86, 0x8c, 0x98, 0xf0, 0xe0, // 9
  0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, // :
  0x00, 0x00, 0x00, 0x68, 0x68, 0x68, 0x70, 0x00, 0x00, 0x00, // ;
  0x00, 0x00, 0xc0, 0xe0, 0x70, 0x38, 0x18, 0x00, 0x00, 0x00, // <
  0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, // =
  0x00, 0x00, 0x00, 0x18, 0x38, 0x70, 0xe0, 0xc0, 0x00, 0x00, // >
  0x00, 0x00, 0x00, 0x00, 0x76, 0xf6, 0xc0, 0x80, 0x00, 0x00, // ?
  0xf0, 0xf8, 0x04, 0xf6, 0x36, 0xf6, 0x36, 0xf2, 0xe0, 0x00, // @
  0xfe, 0xfe, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0xfe, // A
  0xfe, 0xfe, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0xfc, 0x78, // B
  0xf8, 0xfc, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x0e, 0x0c, 0x00, // C
  0xfe, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0e, 0xfc, 0xf8, // D
  0xfe, 0xfe, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x06, 0x00, // E
  0xfe, 0xfe, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // F
  0xf8, 0xfc, 0x06, 0x06, 0xc6, 0xc6, 0xc6, 0xce, 0xfc, 0x78, // G
  0xfe, 0xfe, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0xfe, // H
  0x00, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x00, // I
  0x18, 0x1c, 0x06, 0x06, 0x06, 0x06, 0xfc, 0xf8, 0x00, 0x00, // J
  0xfe, 0xfe, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x00, // K
  0xfe, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, // L
  0xfe, 0xfe, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0xfe, 0xfe, // M
  0xfe, 0xfe, 0x00, 0x00, 0x80, 0xe0, 0x78, 0x1c, 0xfe, 0xfe, // N
  0xf8, 0xfc, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x0e, 0xfc, 0xf8, // O
  0xfe, 0xfe, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // P
  0xf8, 0xfc, 0x0e, 0x06, 0x06, 0x06, 0x36, 0x1c, 0xfe, 0xf6, // Q
  0xfe, 0xfe, 0x80, 0x80, 0xe0, 0xf0, 0xb8, 0x9c, 0x8e, 0x06, // R
  0x00, 0x06, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0xfc, 0x78, // S
  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, // T
  0xf8, 0xfc, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xfc, 0xf8, // U
  0xe0, 0xf0, 0x18, 0x0c, 0x06, 0x06, 0x0c, 0x18, 0xf0, 0xe0, // V
  0xfc, 0xfe, 0x06, 0x06, 0xfc, 0xfc, 0x06, 0x06, 0xfe, 0xfc, // W
  0x06, 0x1e, 0x38, 0x70, 0xc0, 0xc0, 0x70, 0x38, 0x1e, 0x06, // X
  0x00, 0x00, 0x00, 0x80, 0xfe, 0xfe, 0x80, 0x00, 0x00, 0x00, // Y
  0x1e, 0x3e, 0x76, 0xe6, 0xc6, 0x86, 0x06, 0x06, 0x06, 0x06, // Z
  0x00, 0x00, 0xfe, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, // [
  0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, // (backslash)
  0x82, 0x82, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ]
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ^
  0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, // _
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // `
  0x1c, 0x3e, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0xfe, 0xfc, // a
  0xfe, 0xfe, 0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0xfc, 0xf8, // b
  0xf8, 0xfc, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x8e, 0x8c, // c
  0xf8, 0xfc, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xfe, 0xfe, // d
  0xf8, 0xfc, 0x26, 0x26, 0x26, 0x26, 0x26, 0xee, 0xcc, 0x00, // e
  0x80, 0x80, 0xfe, 0xfe, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, // f
  0xc0, 0xe0, 0x26, 0x26, 0x26, 0x26, 0x26, 0xfc, 0xf8, 0x00, // g
  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, // h
  0x00, 0x00, 0x00, 0x06, 0xfe, 0xfe, 0x06, 0x00, 0x00, 0x00, // i
  0x00, 0x00, 0x0c, 0x0e, 0x06, 0x06, 0xfe, 0xfc, 0x00, 0x00, // j
  0x00, 0xfe, 0xfe, 0xe0, 0xf0, 0xb8, 0x1c, 0x0e, 0x06, 0x00, // k
  0x00, 0x00, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x06, 0x00, 0x00, // l
  0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0xfe, // m
  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, // n
  0xf8, 0xfc, 0x06, 0x06, 0x06, 0x06, 0x06, 0xfc, 0xf8, 0x00, // o
  0xfe, 0xfe, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe0, 0xc0, 0x00, // p
  0xc0, 0xe0, 0x20, 0x20, 0x20, 0x20, 0xa0, 0xfe, 0xfe, 0x00, // q
  0xfe, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, // r
  0xc0, 0xe4, 0x26, 0x26, 0x26, 0x26, 0x26, 0x3c, 0x18, 0x00, // s
  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x06, 0x06, 0x0e, 0x0c, 0x00, // t
  0xf8, 0xfc, 0x06, 0x06, 0x06, 0x06, 0x04, 0xfe, 0xf6, 0x00, // u
  0xe0, 0xf0, 0x18, 0x0c, 0x06, 0x06, 0x0c, 0x18, 0xf0, 0xe0, // v
  0xfc, 0xfe, 0x06, 0x06, 0xfe, 0xfe, 0x06, 0x06, 0xfe, 0xfc, // w
  0x00, 0x06, 0x8c, 0xd8, 0x70, 0x70, 0xd8, 0x8c, 0x06, 0x00, // x
  0xc0, 0xe0, 0x60, 0x66, 0x66, 0x66, 0x66, 0xfe, 0xfc, 0x00, // y
  0x06, 0x0e, 0x1e, 0x36, 0x26, 0x66, 0xc6, 0x86, 0x06, 0x00, // z
  0x00, 0x00, 0xf8, 0xfc, 0x06, 0x06, 0x06, 0x02, 0x00, 0x00, // {
  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, // |
  0x00, 0x00, 0x02, 0x06, 0x06, 0x06, 0xfc, 0xf8, 0x00, 0x00, // }
  0x00, 0x80, 0x80, 0x80, 0x80, 0xb0, 0xe0, 0xc0, 0x80, 0x00, // ~
  0x10, 0x38, 0x54, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 
};

//standard 5x7 font
const uint8_t Font5x7[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, //
  0x00, 0x00, 0xfa, 0x00, 0x00, // !
  0x00, 0xe0, 0x00, 0xe0, 0x00, // "
  0x28, 0xfe, 0x28, 0xfe, 0x28, // #
  0x24, 0x54, 0xfe, 0x54, 0x48, // $
  0xc4, 0xc8, 0x10, 0x26, 0x46, // %
  0x6c, 0x92, 0xaa, 0x44, 0x0a, // &
  0x00, 0xa0, 0xc0, 0x00, 0x00, // '
  0x00, 0x38, 0x44, 0x82, 0x00, // (
  0x00, 0x82, 0x44, 0x38, 0x00, // )
  0x10, 0x54, 0x38, 0x54, 0x10, // *
  0x10, 0x10, 0x7c, 0x10, 0x10, // +
  0x00, 0x0a, 0x0c, 0x00, 0x00, // comma
  0x10, 0x10, 0x10, 0x10, 0x10, // -
  0x00, 0x06, 0x06, 0x00, 0x00, // .
  0x04, 0x08, 0x10, 0x20, 0x40, // /
  0x7c, 0x8a, 0x92, 0xa2, 0x7c, // 0
  0x00, 0x42, 0xfe, 0x02, 0x00, // 1
  0x42, 0x86, 0x8a, 0x92, 0x62, // 2
  0x84, 0x82, 0xa2, 0xd2, 0x8c, // 3
  0x18, 0x28, 0x48, 0xfe, 0x08, // 4
  0xe4, 0xa2, 0xa2, 0xa2, 0x9c, // 5
  0x3c, 0x52, 0x92, 0x92, 0x0c, // 6
  0x80, 0x8e, 0x90, 0xa0, 0xc0, // 7
  0x6c, 0x92, 0x92, 0x92, 0x6c, // 8
  0x60, 0x92, 0x92, 0x94, 0x78, // 9
  0x00, 0x6c, 0x6c, 0x00, 0x00, // :
  0x00, 0x6a, 0x6c, 0x00, 0x00, // ;
  0x00, 0x10, 0x28, 0x44, 0x82, // <
  0x28, 0x28, 0x28, 0x28, 0x28, // =
  0x82, 0x44, 0x28, 0x10, 0x00, // >
  0x40, 0x80, 0x8a, 0x90, 0x60, // ?
  0x4c, 0x92, 0x9e, 0x82, 0x7c, // @
  0x7e, 0x88, 0x88, 0x88, 0x7e, // A
  0xfe, 0x92, 0x92, 0x92, 0x6c, // B
  0x7c, 0x82, 0x82, 0x82, 0x44, // C
  0xfe, 0x82, 0x82, 0x44, 0x38, // D
  0xfe, 0x92, 0x92, 0x92, 0x82, // E
  0xfe, 0x90, 0x90, 0x80, 0x80, // F
  0x7c, 0x82, 0x82, 0x8a, 0x4c, // G
  0xfe, 0x10, 0x10, 0x10, 0xfe, // H
  0x00, 0x82, 0xfe, 0x82, 0x00, // I
  0x04, 0x02, 0x82, 0xfc, 0x80, // J
  0xfe, 0x10, 0x28, 0x44, 0x82, // K     0xfe, 0x10, 0x28, 0x44, 0x82
  0xfe, 0x02, 0x02, 0x02, 0x02, // L
  0xfe, 0x40, 0x20, 0x40, 0xfe, // M
  0xfe, 0x20, 0x10, 0x08, 0xfe, // N
  0x7c, 0x82, 0x82, 0x82, 0x7c, // O
  0xfe, 0x90, 0x90, 0x90, 0x60, // P
  0x7c, 0x82, 0x8a, 0x84, 0x7a, // Q
  0xfe, 0x90, 0x98, 0x94, 0x62, // R
  0x62, 0x92, 0x92, 0x92, 0x8c, // S
  0x80, 0x80, 0xfe, 0x80, 0x80, // T
  0xfc, 0x02, 0x02, 0x02, 0xfc, // U
  0xf8, 0x04, 0x02, 0x04, 0xf8, // V
  0xfe, 0x04, 0x18, 0x04, 0xfe, // W
  0xc6, 0x28, 0x10, 0x28, 0xc6, // X
  0xc0, 0x20, 0x1e, 0x20, 0xc0, // Y
  0x86, 0x8a, 0x92, 0xa2, 0xc2, // Z
  0x00, 0x00, 0xfe, 0x82, 0x82, // [
  0x40, 0x20, 0x10, 0x08, 0x04, // (backslash)
  0x82, 0x82, 0xfe, 0x00, 0x00, // ]
  0x20, 0x40, 0x80, 0x40, 0x20, // ^
  0x02, 0x02, 0x02, 0x02, 0x02, // _
  0x00, 0x80, 0x40, 0x20, 0x00, // `
  0x04, 0x2a, 0x2a, 0x2a, 0x1e, // a
  0xfe, 0x12, 0x22, 0x22, 0x1c, // b
  0x1c, 0x22, 0x22, 0x22, 0x04, // c
  0x1c, 0x22, 0x22, 0x12, 0xfe, // d
  0x1c, 0x2a, 0x2a, 0x2a, 0x18, // e
  0x10, 0x7e, 0x90, 0x80, 0x40, // f
  0x10, 0x28, 0x2a, 0x2a, 0x3c, // g
  0xfe, 0x10, 0x20, 0x20, 0x1e, // h
  0x00, 0x22, 0xbe, 0x02, 0x00, // i
  0x04, 0x02, 0x22, 0xbc, 0x00, // j
  0x00, 0xfe, 0x08, 0x14, 0x22, // k
  0x00, 0x82, 0xfe, 0x02, 0x00, // l
  0x3e, 0x20, 0x18, 0x20, 0x1e, // m
  0x3e, 0x10, 0x20, 0x20, 0x1e, // n
  0x1c, 0x22, 0x22, 0x22, 0x1c, // o
  0x3e, 0x28, 0x28, 0x28, 0x10, // p
  0x10, 0x28, 0x28, 0x18, 0x3e, // q
  0x3e, 0x10, 0x20, 0x20, 0x10, // r
  0x12, 0x2a, 0x2a, 0x2a, 0x04, // s
  0x20, 0xfc, 0x22, 0x02, 0x04, // t
  0x3c, 0x02, 0x02, 0x04, 0x3e, // u
  0x38, 0x04, 0x02, 0x04, 0x38, // v
  0x3c, 0x02, 0x0c, 0x02, 0x3c, // w
  0x22, 0x14, 0x08, 0x14, 0x22, // x
  0x30, 0x0a, 0x0a, 0x0a, 0x3c, // y
  0x22, 0x26, 0x2a, 0x32, 0x22, // z
  0x00, 0x10, 0x6c, 0x82, 0x00, // {
  0x00, 0x00, 0xfe, 0x00, 0x00, // |
  0x00, 0x82, 0x6c, 0x10, 0x00, // }
  0x10, 0x10, 0x54, 0x38, 0x10, // ~
  0x10, 0x38, 0x54, 0x10, 0x10, // 
};