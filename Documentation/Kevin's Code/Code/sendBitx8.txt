static inline void sendBitx8(  const uint8_t row, const uint8_t colorbyte, const uint8_t onBits) {

  asm volatile (

    "L_%=: \n\r"
    "out %[port], %[onBits] \n\t"
    // (1 cycles) - send either T0H or the first part of T1H.
    // Onbits is a mask of which bits have strings attached.
    // Next determine if we are going to be sending 1s or 0s based on the current bit in the color....

    "mov r0, %[bitwalker] \n\t"               // (1 cycles)
    "and r0, %[colorbyte] \n\t"               // (1 cycles)  - is the current bit in the color byte set?
    "breq OFF_%= \n\t"                        // (1 cycles) - bit in color is 0, then send full zero row
    //(takes 2 cycles if branch taken, count the extra 1 on the target line)

    // If we get here, then we want to send a 1 for every row that has an ON dot...
    "nop \n\t  "
    "out %[port], %[row]   \n\t"                  // (1 cycles) - set the output bits to [row]
    //This is phase for T0H-T1H.
    // ==========
    // (5 cycles) - T0H (Phase #1)


    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t "                                   // (1 cycles)

    "out %[port], __zero_reg__ \n\t"              // (1 cycles) - set the output bits to 0x00
    //based on the bit in colorbyte. This is phase for T0H-T1H
    // ==========
    // (8 cycles) - Phase #2

    "ror %[bitwalker] \n\t"                      // (1 cycles) - get ready for next pass.
    //On last pass, the bit will end up in C flag

    "brcs DONE_%= \n\t"                          // (1 cycles) Exit if carry bit is set as a
    //result of us walking all 8 bits. We assume that the process around us will tak long enough
    //to cover the phase 3 delay

    "nop \n\t \n\t "                             // (1 cycles) - When added to the 5 cycles in S:,
    //we gte the 7 cycles of T1L

    "jmp L_%= \n\t"                              // (3 cycles)
    // (1 cycles) - The OUT on the next pass of the loop
    // ==========
    // (7 cycles) - T1L


    "OFF_%=: \n\r"                                // (1 cycles)    Note that we land here becuase of breq,
    //which takes takes 2 cycles

    "out %[port], __zero_reg__ \n\t"              // (1 cycles) - set the output bits to 0x00 based on the
    //bit in colorbyte. This is phase for T0H-T1H
    // ==========
    // (5 cycles) - T0H

    "ror %[bitwalker] \n\t"                      // (1 cycles) - get ready for next pass.
    //On last pass, the bit will end up in C flag

    "brcs DONE_%= \n\t"             // (1 cycles) Exit if carry bit is set as a
    //result of us walking all 8 bits. We assume that the
    //process around us will take long enough to cover the phase 3 delay

    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t nop \n\t "                          // (2 cycles)
    "nop \n\t "                                   // (1 cycles)

    "jmp L_%= \n\t"                               // (3 cycles)
    // (1 cycles) - The OUT on the next pass of the loop
    // ==========
    //(15 cycles) - T0L


    "DONE_%=: \n\t"

    // Don't need an explicit delay here since the overhead that follows will always be long enough

    ::
    [port]    "I" (_SFR_IO_ADDR(PIXEL_PORTC)),
    [row]   "d" (row),
    [onBits]   "d" (onBits),
    [colorbyte]   "d" (colorbyte ),     // Phase 2 of the signal where the actual data bits show up.
    [bitwalker] "r" (0x80)    // register to hold a bit that we will walk down though the color byte

  );

  // Note that the inter-bit gap can be as long as you want as long as it doesn't exceed the reset timeout
  //(which is A long time)

}